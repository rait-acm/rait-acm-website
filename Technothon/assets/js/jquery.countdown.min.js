/*!
 * The Final Countdown for jQuery v2.2.0 (http://hilios.github.io/jQuery.countdown/)
 * Copyright (c) 2016 Edson Hilios
 * 
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in
 * the Software without restriction, including without limitation the rights to
 * use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of
 * the Software, and to permit persons to whom the Software is furnished to do so,
 * subject to the following conditions:
 * 
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * 
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS
 * FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR
 * COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER
 * IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN
 * CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 */
(function ($) {
    "use strict";

    if (typeof define === "function" && define.amd) {
        define(["jquery"], $);
    } else {
        $(jQuery);
    }
})(function ($) {
    "use strict";

    function parseDate(input) {
        if (input instanceof Date) {
            return input;
        }

        if (String(input).match(datePattern)) {
            if (String(input).match(/^[0-9]*$/)) {
                input = Number(input);
            }

            if (String(input).match(/\-/)) {
                input = String(input).replace(/\-/g, "/");
            }

            return new Date(input);
        }

        throw new Error("Couldn't cast `" + input + "` to a date object.");
    }

    function escapeRegExp(input) {
        return input.toString().replace(/([.?*+^$[\]\\(){}|-])/g, "\\$1");
    }

    function formatTemplate(input) {
        return function (template) {
            var matches = template.match(formatPattern);

            if (matches) {
                for (var i = 0; i < matches.length; ++i) {
                    var match = matches[i].match(formatTokenPattern);
                    var token = escapeRegExp(match[0]);
                    var modifier = match[1] || "";
                    var format = match[3] || "";
                    var value = null;
                    var tokenName = match[2];

                    if (tokenName in formatTokens) {
                        value = formatTokens[tokenName];
                        value = Number(input[value]);
                    }

                    if (value !== null) {
                        if (modifier === "!") {
                            value = formatModifier(format, value);
                        } else if (modifier === "" && value < 10) {
                            value = "0" + value.toString();
                        }

                        template = template.replace(token, value.toString());
                    }
                }
            }

            template = template.replace(/%%/, "%");
            return template;
        };
    }

    function formatModifier(modifier, value) {
        var singular = "s";
        var plural = "";

        if (modifier) {
            modifier = modifier.replace(/(:|;|\s)/gi, "").split(/\,/);

            if (modifier.length === 1) {
                singular = modifier[0];
            } else {
                singular = modifier[0];
                plural = modifier[1];
            }
        }

        return Math.abs(value) > 1 ? plural : singular;
    }

    var datePattern = /^(?:\d{1,2}\/){2}\d{4}( \d{1,2}(:\d{2}){2})?|(?:\d{4}([\/\-]\d{1,2}){2}( \d{1,2}(:\d{2}){2})?)/;
    var formatTokens = {
        Y: "years",
        m: "months",
        n: "daysToMonth",
        d: "daysToWeek",
        w: "weeks",
        W: "weeksToMonth",
        H: "hours",
        M: "minutes",
        S: "seconds",
        D: "totalDays",
        I: "totalHours",
        N: "totalMinutes",
        T: "totalSeconds",
    };
    var formatPattern = /%(-|!)?[A-Z]{1}(:[^;]+;)?/gi;
    var formatTokenPattern = /%(-|!)?([a-zA-Z]{1})(:[^;]+;)?/;
    var instances = [];
    var defaultOptions = {
        precision: 100,
        elapse: false,
        defer: false,
    };

    var Countdown = function (element, finalDate, options) {
        this.el = element;
        this.$el = $(element);
        this.interval = null;
        this.offset = {};
        this.options = $.extend({}, defaultOptions);
        this.firstTick = true;
        this.instanceNumber = instances.length;
        instances.push(this);
        this.$el.data("countdown-instance", this.instanceNumber);

        if (options) {
            if (typeof options === "function") {
                this.$el.on("update.countdown", options);
                this.$el.on("stoped.countdown", options);
                this.$el.on("finish.countdown", options);
            } else {
                this.options = $.extend({}, defaultOptions, options);
            }
        }

        this.setFinalDate(finalDate);

        if (this.options.defer === false) {
            this.start();
        }
    };

    $.extend(Countdown.prototype, {
        start: function () {
            if (this.interval !== null) {
                clearInterval(this.interval);
            }

            var self = this;
            this.update();
            this.interval = setInterval(function () {
                self.update.call(self);
            }, this.options.precision);
        },

        stop: function () {
            clearInterval(this.interval);
            this.interval = null;
            this.dispatchEvent("stoped");
        },

        toggle: function () {
            if (this.interval) {
                this.stop();
            } else {
                this.start();
            }
        },

        pause: function () {
            this.stop();
        },

        resume: function () {
            this.start();
        },

        remove: function () {
            this.stop.call(this);
            instances[this.instanceNumber] = null;
            delete this.$el.data().countdownInstance;
        },

        setFinalDate: function (date) {
            this.finalDate = parseDate(date);
        },

        update: function () {
            if (this.$el.closest("html").length === 0) {
                this.remove();
                return;
            }

            var now = new Date();
            var timeLeft = this.finalDate.getTime() - now.getTime();
            timeLeft = Math.ceil(timeLeft / 1000);

            if (!this.options.elapse && timeLeft < 0) {
                timeLeft = 0;
            }

            if (this.totalSecsLeft === timeLeft || this.firstTick) {
                this.firstTick = false;
                return;
            }

            this.totalSecsLeft = timeLeft;
            this.elapsed = now >= this.finalDate;
            this.offset = {
                seconds: this.totalSecsLeft % 60,
                minutes: Math.floor((this.totalSecsLeft / 60) % 60),
                hours: Math.floor((this.totalSecsLeft / 3600) % 24),
                days: Math.floor((this.totalSecsLeft / 86400) % 7),
                daysToWeek: Math.floor((this.totalSecsLeft / 86400) % 7),
                daysToMonth: Math.floor((this.totalSecsLeft / 86400) % 30.4368),
                weeks: Math.floor((this.totalSecsLeft / 604800) % 4),
                weeksToMonth: Math.floor((this.totalSecsLeft / 604800) % 4),
                months: Math.floor((this.totalSecsLeft / 2592000) % 12),
                years: Math.abs(this.finalDate.getFullYear() - now.getFullYear()),
                totalDays: Math.floor(this.totalSecsLeft / 86400),
                totalHours: Math.floor(this.totalSecsLeft / 3600),
                totalMinutes: Math.floor(this.totalSecsLeft / 60),
                totalSeconds: this.totalSecsLeft,
            };

            if (!this.options.elapse || this.totalSecsLeft > 0) {
                this.dispatchEvent("update");
            } else {
                this.stop();
                this.dispatchEvent("finish");
            }
        },

        dispatchEvent: function (event) {
            var eventObject = $.Event(event + ".countdown");
            eventObject.finalDate = this.finalDate;
            eventObject.elapsed = this.elapsed;
            eventObject.offset = $.extend({}, this.offset);
            eventObject.strftime = formatTemplate(this.offset);
            this.$el.trigger(eventObject);
        },
    });

    $.fn.countdown = function () {
        var args = Array.prototype.slice.call(arguments, 0);

        return this.each(function () {
            var instanceNumber = $(this).data("countdown-instance");

            if (instanceNumber !== undefined) {
                var instance = instances[instanceNumber];
                var method = args[0];

                if (Countdown.prototype.hasOwnProperty(method)) {
                    instance[method].apply(instance, args.slice(1));
                } else if (method === undefined || typeof method !== "string" || !method.match(/^[$A-Z_][0-9A-Z_$]*$/i)) {
                    instance.setFinalDate.call(instance, method);
                    instance.start();
                } else {
                    $.error("Method " + method + " does not exist on jQuery.countdown");
                }
            } else {
                new Countdown(this, args[0], args[1]);
            }
        });
    };
});
